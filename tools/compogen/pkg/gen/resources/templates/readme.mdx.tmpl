---
title: "{{ .Title }}"
lang: "en-US"
draft: {{ .IsDraft }}
description: "Learn about how to set up a VDP {{ .Title }} component https://github.com/instill-ai/instill-core"
---

The {{ .Title }} component is {{ .ComponentType.IndefiniteArticle }} {{ .ComponentType }} component that allows users to {{ firstToLower .Description }}.
It can carry out the following tasks:
{{ range .Tasks }}
- [{{ .Title }}](#{{ asAnchor .Title}}){{ end }}

{{ loadExtraContent "intro" }}

## Release Stage

`{{ .ReleaseStage.String }}`

{{ loadExtraContent "release" }}

## Configuration

The component configuration is defined and maintained [here]({{ .SourceURL }}/config/definition.json).

{{ loadExtraContent "config" }}

{{ if or .SetupConfig.Prerequisites .SetupConfig.Properties }}
## Setup
{{ with .SetupConfig.Prerequisites}}
<InfoBlock type="info" title="Prerequisites">{{ . }}</InfoBlock>
{{ end }}
{{ $vendor := .Vendor }}
{{ with .SetupConfig.Properties }}

In order to communicate with {{ if $vendor }}{{ $vendor }}{{ else }}the
external application{{ end }}, the following connection details need to be
provided. You may specify them directly in a pipeline recipe as key-value pairs
withing the component's `setup` block, or you can create a **Connection** from
the [**Integration Settings**](https://www.instill.tech/docs/vdp/integration)
page and reference the whole `setup` as `setup:
${connection.<my-connection-id>}`.

| Field | Field ID | Type | Note |
| :--- | :--- | :--- | :--- |{{ range . }}
| {{ .Title }}{{ if .Required }} (required){{ end }} | `{{ .ID }}` | {{ .Type }} | {{ .Description }} {{ if .Enum }} there are options: <br/>- {{ enumValues .Enum }}  {{ end }} |{{ end }}
{{ end }}
{{ loadExtraContent "setup" }}
{{ end }}

{{ if .SetupConfig.OneOf }}
{{ range $key, $options := .SetupConfig.OneOf }}
{{ range $idx, $option := $options }}

#### {{ $key }} option: {{ $idx }}

| Field | Field ID | Type | Note |
| :--- | :--- | :--- | :--- |{{ range $propKey, $prop := $option.Properties }}
| {{ if $prop.Title }}{{ $prop.Title }} {{ else }} {{ $propKey }} {{ end }}  | {{ $propKey }} | {{ $prop.Type }} | {{ if $prop.Const }} please intput  "{{ $prop.Const }}" {{ else }} {{ $prop.Description }}  {{ end }} {{ if .Enum }} there are options: <br/>- {{ enumValues .Enum }}  {{ end }} |{{ end }}{{ end }}{{ end }}
{{ end }}

## Supported Tasks{{ range $i, $task := .Tasks}}

### {{ $task.Title }}
{{ with $task.Description }}
{{ . }}
{{ end }}
{{ if $task.Input }}
| Input | ID | Type | Description |
| :--- | :--- | :--- | :--- |
| Task ID (required) | `task` | string | `{{ $task.ID }}` |{{ range $task.Input }}
| {{ .Title }}{{ if .Required }} (required){{ end }} | `{{ .ID }}` | {{ .Type }} | {{ .Description }} |{{ end }}
{{ end }}

{{ if $task.InputObjects }}
{{ range $idx, $objectSchemaMap := $task.InputObjects }}
{{ range $key, $schema := $objectSchemaMap }}
{{ if $schema.Properties }}
#### {{ $key }}

| Field | Field ID | Type | Note |
| :--- | :--- | :--- | :--- |{{ range $propKey, $prop := $schema.Properties }}
| {{ $prop.Title }} | {{ $propKey }} | {{ $prop.Type }} | {{ $prop.Description }} {{ if .Enum }} there are options: <br/>- {{ enumValues .Enum }}  {{ end }} |{{ end }}
{{ end }}{{ end }}{{ end }}{{ end }}

{{ if $task.OneOf }}
{{ range $key, $options := $task.OneOf }}
{{ range $idx, $option := $options }}
{{ if $option.Properties }}
#### {{ $key }} option: {{ $idx }}

| Field | Field ID | Type | Note |
| :--- | :--- | :--- | :--- |{{ range $propKey, $prop := $option.Properties }}
| {{ if $prop.Title }}{{ $prop.Title }} {{ else }} {{ $propKey }} {{ end }}  | {{ $propKey }} | {{ $prop.Type }} | {{ if $prop.Const }} please intput  "{{ $prop.Const }}" {{ else }} {{ $prop.Description }}  {{ end }} {{ if .Enum }} there are options: <br/>- {{ enumValues .Enum }}  {{ end }} |{{ end }}
{{ end }}{{ end }}{{ end }}{{ end }}



{{ if $task.Output }}
| Output | ID | Type | Description |
| :--- | :--- | :--- | :--- |{{ range $task.Output }}
| {{ .Title }}{{ if not .Required }} (optional){{ end }} | `{{ .ID }}` | {{ .Type }} | {{ .Description }} |{{ end }}
{{ end }}


{{ if $task.OutputObjects }}
{{ range $idx, $objectSchemaMap := $task.OutputObjects }}
{{ range $key, $schema := $objectSchemaMap }}
{{ if $schema.Properties }}
#### {{ $key }}

| Field | Field ID | Type | Note |
| :--- | :--- | :--- | :--- |{{ range $propKey, $prop := $schema.Properties }}
| {{ $prop.Title }} | {{ $propKey }} | {{ $prop.Type }} | {{ $prop.Description }} |{{ end }}
{{ end }}{{ end }}{{ end }}{{ end }}

{{ loadExtraContent $task.ID }}

{{ end }}

{{ loadExtraContent "bottom" }}
