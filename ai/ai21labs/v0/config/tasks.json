{
  "$defs": {
    "multi-modal-content": {
      "instillFormat": "structured/multi-modal-content",
      "items": {
        "properties": {
          "image-url": {
            "properties": {
              "url": {
                "description": "Either a URL of the image or the base64 encoded image data.",
                "type": "string"
              }
            },
            "required": [
              "url"
            ],
            "type": "object"
          },
          "text": {
            "description": "The text content.",
            "instillFormat": "string",
            "type": "string"
          },
          "type": {
            "description": "The type of the content part.",
            "enum": [
              "text",
              "image_url"
            ],
            "instillFormat": "string",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "chat-message": {
      "properties": {
        "content": {
          "$ref": "#/$defs/multi-modal-content",
          "description": "The message content",
          "instillUIOrder": 1,
          "title": "Content"
        },
        "role": {
          "description": "The message role, i.e. 'system', 'user' or 'assistant'",
          "instillFormat": "string",
          "instillUIOrder": 0,
          "title": "Role",
          "type": "string"
        }
      },
      "required": [
        "role",
        "content"
      ],
      "title": "Chat Message",
      "type": "object"
    },
    "chat-usage": {
      "description": "Usage tokens in AI21labs chat models",
      "instillUIOrder": 1,
      "properties": {
        "input-tokens": {
          "description": "The input tokens read by AI21labs model",
          "instillFormat": "number",
          "instillUIOrder": 2,
          "title": "Input Tokens",
          "type": "number"
        },
        "output-tokens": {
          "description": "The output tokens generated by AI21labs model",
          "instillFormat": "number",
          "instillUIOrder": 3,
          "title": "Output Tokens",
          "type": "number"
        }
      },
      "required": [
        "input-tokens",
        "output-tokens"
      ],
      "title": "Usage",
      "type": "object"
    }
  },
  "TASK_TEXT_GENERATION_CHAT": {
    "instillShortDescription": "Provide text outputs in response to text inputs.",
    "description": "AI21labs text generation models (often called generative pre-trained transformers or large language models) have been trained to understand natural language, code, and images. The models provide text outputs in response to their inputs. The inputs to these models are also referred to as \"prompts\". Designing a prompt is essentially how you \u201cprogram\u201d a large language model model, usually by providing instructions or some examples of how to successfully complete a task.",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "prompt",
        "model"
      ],
      "instillUIOrder": 0,
      "properties": {
        "chat-history": {
          "description": "Incorporate external chat history, specifically previous messages within the conversation. Please note that System Message will be ignored and will not have any effect when this field is populated. Each message should adhere to the format: : {\"role\": \"The message role, i.e. 'system', 'user' or 'assistant'\", \"content\": \"message content\"}.",
          "instillAcceptFormats": [
            "structured/chat-messages"
          ],
          "instillShortDescription": "Incorporate external chat history, specifically previous messages within the conversation.",
          "instillUIOrder": 4,
          "instillUpstreamTypes": [
            "reference"
          ],
          "items": {
            "$ref": "#/$defs/chat-message"
          },
          "title": "Chat history",
          "type": "array"
        },
        "max-new-tokens": {
          "default": 50,
          "description": "The maximum number of tokens for model to generate",
          "instillAcceptFormats": [
            "integer"
          ],
          "instillUIOrder": 6,
          "instillUpstreamTypes": [
            "value",
            "reference"
          ],
          "title": "Max new tokens",
          "type": "integer"
        },
        "model": {
          "enum": [
            "jamba-instruct",
            "jamba-instruct-preview"
          ],
          "example": "jamba-instruct",
          "description": "The AI21labs model to be used",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIOrder": 0,
          "instillUpstreamTypes": [
            "value"
          ],
          "instillCredentialMap": {
            "values": [
              "jamba-instruct",
              "jamba-instruct-preview"
            ],
            "targets": [
              "setup.api-key"
            ]
          },
          "title": "Model",
          "type": "string"
        },
        "prompt": {
          "description": "The prompt text",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 2,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Prompt",
          "type": "string"
        },
        "prompt-images": {
          "description": "The prompt images (Note: Not supported by AI21labs Models)",
          "instillAcceptFormats": [
            "array:image/*"
          ],
          "instillUIOrder": 3,
          "instillUpstreamTypes": [
            "reference"
          ],
          "items": {
            "type": "string"
          },
          "title": "Prompt Images",
          "type": "array"
        },
        "seed": {
          "description": "The seed (Note: Not supported by AI21labs Models)",
          "instillAcceptFormats": [
            "integer"
          ],
          "instillUIOrder": 4,
          "instillUpstreamTypes": [
            "value",
            "reference"
          ],
          "title": "Seed",
          "type": "integer"
        },
        "system-message": {
          "default": "You are a helpful assistant.",
          "description": "The system message helps set the behavior of the assistant. For example, you can modify the personality of the assistant or provide specific instructions about how it should behave throughout the conversation. By default, the model\u2019s behavior is set using a generic message as \"You are a helpful assistant.\"",
          "instillAcceptFormats": [
            "string"
          ],
          "instillShortDescription": "The system message helps set the behavior of the assistant",
          "instillUIMultiline": true,
          "instillUIOrder": 2,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "System message",
          "type": "string"
        },
        "temperature": {
          "default": 0.7,
          "description": "The temperature for sampling",
          "instillAcceptFormats": [
            "number"
          ],
          "instillUIOrder": 5,
          "instillUpstreamTypes": [
            "value",
            "reference"
          ],
          "title": "Temperature",
          "type": "number"
        },
        "top-k": {
          "default": 10,
          "description": "Top k for sampling (Note: Not supported by AI21labs Models)",
          "instillAcceptFormats": [
            "integer"
          ],
          "instillUIOrder": 5,
          "instillUpstreamTypes": [
            "value",
            "reference"
          ],
          "title": "Top K",
          "type": "integer"
        },
        "top-p": {
          "default": 0.7,
          "description": "Top p for sampling",
          "instillAcceptFormats": [
            "number"
          ],
          "instillUIOrder": 5,
          "instillUpstreamTypes": [
            "value",
            "reference"
          ],
          "title": "Top P",
          "type": "number"
        },
        "stop-words": {
          "description": "The stop words to be used in the model",
          "instillAcceptFormats": [
            "array:string"
          ],
          "instillUIOrder": 7,
          "instillUpstreamTypes": [
            "value",
            "reference"
          ],
          "title": "Stop Words",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "prompt",
        "model"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 0,
      "properties": {
        "text": {
          "description": "Model Output",
          "instillUIOrder": 0,
          "instillFormat": "string",
          "instillUIMultiline": true,
          "title": "Text",
          "type": "string"
        },
        "usage": {
          "$ref": "#/$defs/chat-usage"
        }
      },
      "required": [
        "text"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_TEXT_EMBEDDINGS": {
    "instillShortDescription": "Provide a vector representation of the provided text",
    "description": "Embedding vectors encode semantic information about the given text. This can be used as a basis for various use cases including custom RAG engine implementations, semantic search, clustering, and classification.",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "text",
        "style"
      ],
      "instillUIOrder": 0,
      "properties": {
        "text": {
          "description": "The text content to be embedded",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 1,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Text",
          "type": "string"
        },
        "style": {
          "description": "The style of the text",
          "enum": [
            "segment",
            "query"
          ],
          "example": "segment",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIOrder": 2,
          "instillUpstreamTypes": [
            "value"
          ],
          "title": "Style",
          "type": "string"
        }
      },
      "required": [
        "text"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 0,
      "properties": {
        "embedding": {
          "description": "Embedding of the input text",
          "instillUIOrder": 0,
          "instillFormat": "array:number",
          "title": "Embedding",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "usage": {
          "description": "Usage tokens in AI21labs embedding models",
          "instillUIOrder": 1,
          "properties": {
            "tokens": {
              "description": "The input tokens read by AI21labs embedding model",
              "instillFormat": "number",
              "instillUIOrder": 2,
              "title": "Tokens",
              "type": "number"
            }
          },
          "required": [
            "tokens"
          ],
          "title": "Usage",
          "type": "object"
        }
      },
      "required": [
        "embedding"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_CONTEXTUAL_ANSWERING": {
    "instillShortDescription": "Contextual answers based on information passed into the prompt",
    "description": "Given a prompt containing information, ask a question about that information. The response will be limited to what the model can learn based on the provided information; information gained during model training outside the prompt will not be used in the answer.",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "context",
        "question"
      ],
      "instillUIOrder": 0,
      "properties": {
        "context": {
          "description": "The context text",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 1,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Context",
          "type": "string"
        },
        "question": {
          "description": "The question text",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 1,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Question",
          "type": "string"
        }
      },
      "required": [
        "context",
        "question"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 0,
      "properties": {
        "answer": {
          "description": "Model Output, generated answer from the given context and question",
          "instillUIOrder": 0,
          "instillFormat": "string",
          "title": "Answer",
          "type": "string"
        },
        "answer-in-context": {
          "description": "Whether the answer is in context",
          "instillUIOrder": 1,
          "instillFormat": "boolean",
          "title": "Answer in Context",
          "type": "boolean"
        }
      },
      "required": [
        "answer"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_TEXT_SUMMARIZATION": {
    "instillShortDescription": "Summarize text content",
    "description": "AI21 Studio's summarize models offer access to our world-class summarization engine. They have been specifically developed for providing a faithful summary of documents, meeting and call transcripts, chat correspondences, and more.",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "text",
        "source"
      ],
      "instillUIOrder": 0,
      "properties": {
        "text": {
          "description": "The text content to be summarized",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 1,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Text",
          "type": "string"
        },
        "focus": {
          "description": "The focus of the summary",
          "instillAcceptFormats": [
            "string"
          ],
          "default": "Give me a concise summary of the text.",
          "instillUIMultiline": true,
          "instillUIOrder": 2,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Focus",
          "type": "string"
        },
        "source": {
          "description": "Whether the text is plain text or from a URL",
          "enum": [
            "TEXT",
            "URL"
          ],
          "example": "TEXT",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIOrder": 3,
          "instillUpstreamTypes": [
            "value"
          ],
          "title": "Source",
          "type": "string"
        }
      },
      "required": [
        "text",
        "source"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 0,
      "properties": {
        "summary": {
          "description": "Summerization of the input text",
          "instillUIOrder": 0,
          "instillFormat": "string",
          "instillUIMultiline": true,
          "title": "Summary",
          "type": "string"
        }
      },
      "required": [
        "summary"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_TEXT_SUMMARIZATION_SEGMENT": {
    "instillShortDescription": "Summarize text content by segments",
    "description": "AI21 Studio's summarize models offer access to our world-class summarization engine. They have been specifically developed for providing a faithful summary of documents, meeting and call transcripts, chat correspondences, and more.",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "text",
        "source"
      ],
      "instillUIOrder": 0,
      "properties": {
        "text": {
          "description": "The text content to be summarized",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 1,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Text",
          "type": "string"
        },
        "focus": {
          "description": "The focus of the summary",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 2,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Focus",
          "type": "string"
        },
        "source": {
          "description": "Whether the text is plain text or from a URL",
          "enum": [
            "TEXT",
            "URL"
          ],
          "example": "TEXT",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIOrder": 3,
          "instillUpstreamTypes": [
            "value"
          ],
          "title": "Source",
          "type": "string"
        }
      },
      "required": [
        "text",
        "source"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 0,
      "properties": {
        "summerizations": {
          "description": "Summerization of the input text",
          "instillUIOrder": 0,
          "instillFormat": "array:object",
          "title": "Summerizations",
          "type": "array",
          "items": {
            "type": "object",
            "description": "Summerization of the segment",
            "properties": {
              "summary": {
                "description": "Summerization of the segment",
                "instillUIOrder": 0,
                "instillFormat": "string",
                "title": "Summary",
                "type": "string"
              },
              "text": {
                "description": "Original text for the segment",
                "instillUIOrder": 1,
                "instillFormat": "string",
                "title": "Text",
                "type": "string"
              },
              "html": {
                "description": "HTML content of the segment",
                "instillUIOrder": 2,
                "instillFormat": "string",
                "title": "HTML",
                "type": "string"
              },
              "type": {
                "description": "Type of the segment",
                "instillUIOrder": 3,
                "instillFormat": "string",
                "title": "Type",
                "type": "string"
              }
            },
            "required": [],
            "title": "Summerizations"
          }
        }
      },
      "required": [
        "summerizations"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_TEXT_PARAPHRASING": {
    "instillShortDescription": "Paraphrase text content",
    "description": "The model returns 10 possibilities for the requested text. AI21 Studio's Paraphrase API offers access to our state-of-the-art paraphrasing engine. It has been fine-tuned specifically for paraphrasing. As a result, it's easier to integrate into your systems, and since it's optimized for this purpose, it's also more efficient (and therefore cheaper) than building it from scratch. This is also the engine behind Wordtune - so you know it's pretty awesome.",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "text",
        "style"
      ],
      "instillUIOrder": 0,
      "properties": {
        "text": {
          "description": "The text content to be paraphrased",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 1,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Text",
          "type": "string"
        },
        "style": {
          "description": "The style of the text",
          "enum": [
            "general",
            "casual",
            "formal",
            "long",
            "short"
          ],
          "example": "general",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIOrder": 2,
          "instillUpstreamTypes": [
            "value"
          ],
          "title": "Style",
          "type": "string"
        },
        "start-index": {
          "description": "The start index of the text to be paraphrased",
          "instillAcceptFormats": [
            "integer"
          ],
          "instillUIOrder": 3,
          "instillUpstreamTypes": [
            "value",
            "reference"
          ],
          "title": "Start Index",
          "type": "integer"
        },
        "end-index": {
          "description": "The end index of the text to be paraphrased",
          "instillAcceptFormats": [
            "integer"
          ],
          "instillUIOrder": 4,
          "instillUpstreamTypes": [
            "value",
            "reference"
          ],
          "title": "End Index",
          "type": "integer"
        }
      },
      "required": [
        "text",
        "style"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 0,
      "properties": {
        "suggestions": {
          "description": "The suggestions of the text to be paraphrased from model",
          "instillUIOrder": 0,
          "instillFormat": "array:string",
          "instillUIMultiline": true,
          "title": "Suggestions",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "suggestions"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_GRAMMAR_CHECK": {
    "instillShortDescription": "Suggests changes to grammatical errors found by the model in the submitted string",
    "description": "With AI21labs Grammatical Error Corrections (GEC) endpoint, you can tap into our advanced GEC engine, purpose-built and expertly tuned for this task.",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "text"
      ],
      "instillUIOrder": 0,
      "properties": {
        "text": {
          "description": "The text content to be checked",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 1,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Text",
          "type": "string"
        }
      },
      "required": [
        "text"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 0,
      "properties": {
        "suggestions": {
          "description": "The suggestions of the text to be corrected from model",
          "instillUIOrder": 0,
          "instillFormat": "array:object",
          "title": "Suggestions",
          "type": "array",
          "items": {
            "type": "object",
            "description": "Suggestion of the text",
            "properties": {
              "suggestion": {
                "description": "Suggestion of the text",
                "instillUIOrder": 0,
                "instillFormat": "string",
                "title": "Suggestion",
                "type": "string"
              },
              "start-index": {
                "description": "Start index of the suggestion",
                "instillUIOrder": 1,
                "instillFormat": "number",
                "title": "Start Index",
                "type": "number"
              },
              "end-index": {
                "description": "End index of the suggestion",
                "instillUIOrder": 2,
                "instillFormat": "number",
                "title": "End Index",
                "type": "number"
              },
              "type": {
                "description": "Type of the suggestion",
                "instillUIOrder": 3,
                "instillFormat": "string",
                "title": "Type",
                "type": "string"
              },
              "text": {
                "description": "Original text for the suggestion",
                "instillUIOrder": 4,
                "instillFormat": "string",
                "title": "Text",
                "type": "string"
              }
            },
            "required": [
              "suggestion"
            ],
            "title": "Suggestions"
          }
        }
      },
      "required": [
        "suggestions"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_TEXT_IMPROVEMENT": {
    "instillShortDescription": "Provides rewrite recommendations for improving the fluency, clarity and style of the input text.",
    "description": "By using AI21labs Text Improvement endpoint, you can access our state-of-the-art recommendations engine, which is optimized for generating high-quality results efficiently.",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "text"
      ],
      "instillUIOrder": 0,
      "properties": {
        "text": {
          "description": "The text content to be improved",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 1,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Text",
          "type": "string"
        }
      },
      "required": [
        "text"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 0,
      "properties": {
        "improvements": {
          "description": "The suggestions of the text to be improved from model",
          "instillUIOrder": 0,
          "instillFormat": "array:object",
          "title": "Improvements",
          "type": "array",
          "items": {
            "type": "object",
            "description": "Improvements of the text",
            "properties": {
              "texts": {
                "description": "The suggestions of the text to be improved from model",
                "instillUIOrder": 0,
                "instillFormat": "array:string",
                "title": "Texts",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "start-index": {
                "description": "Start index of the improvement",
                "instillUIOrder": 1,
                "instillFormat": "number",
                "title": "Start Index",
                "type": "number"
              },
              "end-index": {
                "description": "End index of the improvement",
                "instillUIOrder": 2,
                "instillFormat": "number",
                "title": "End Index",
                "type": "number"
              },
              "type": {
                "description": "Type of the improvement",
                "instillUIOrder": 3,
                "instillFormat": "string",
                "title": "Type",
                "type": "string"
              }
            },
            "required": [
              "texts"
            ],
            "title": "Improvements"
          }
        }
      },
      "required": [
        "improvements"
      ],
      "title": "Output",
      "type": "object"
    }
  },
  "TASK_TEXT_SEGMENTATION": {
    "instillShortDescription": "Split text into segments by function or topic",
    "description": "Use the AI21labs Text Segmentation endpoint to intelligently segment text into coherent and readable units, based on distinct topics and lines. This allows for easy breakdown of long text into manageable chunks of text. The endpoint supports both raw text and URLs of webpages as input sources.",
    "input": {
      "description": "Input",
      "instillEditOnNodeFields": [
        "text",
        "source"
      ],
      "instillUIOrder": 0,
      "properties": {
        "text": {
          "description": "The text content to be split into segments",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIMultiline": true,
          "instillUIOrder": 1,
          "instillUpstreamTypes": [
            "value",
            "reference",
            "template"
          ],
          "title": "Text",
          "type": "string"
        },
        "source": {
          "description": "Whether the text is plain text or from a URL",
          "enum": [
            "TEXT",
            "URL"
          ],
          "example": "TEXT",
          "instillAcceptFormats": [
            "string"
          ],
          "instillUIOrder": 3,
          "instillUpstreamTypes": [
            "value"
          ],
          "title": "Source",
          "type": "string"
        }
      },
      "required": [
        "text",
        "source"
      ],
      "title": "Input",
      "type": "object"
    },
    "output": {
      "description": "Output",
      "instillUIOrder": 0,
      "properties": {
        "segments": {
          "description": "The segments of the text",
          "instillUIOrder": 0,
          "instillFormat": "array:object",
          "title": "Segments",
          "type": "array",
          "items": {
            "type": "object",
            "description": "Segment of the text",
            "properties": {
              "text": {
                "description": "The text content of the segment",
                "instillUIOrder": 0,
                "instillFormat": "string",
                "title": "Text",
                "type": "string"
              },
              "type": {
                "description": "Type of the segment",
                "instillUIOrder": 1,
                "instillFormat": "string",
                "title": "Type",
                "type": "string"
              }
            },
            "required": [
              "text"
            ],
            "title": "Segment"
          }
        }
      },
      "required": [
        "segments"
      ],
      "title": "Output",
      "type": "object"
    }
  }
}
